<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Arduino Game Console</title>
    <link>https://arduinogameconsoleblog.github.io/posts/</link>
    <description>Recent content in Posts on Arduino Game Console</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://arduinogameconsoleblog.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arduino Game Console</title>
      <link>https://arduinogameconsoleblog.github.io/posts/arduino-game-console/</link>
      <pubDate>Sat, 11 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://arduinogameconsoleblog.github.io/posts/arduino-game-console/</guid>
      <description>&lt;h2 id=&#34;1-motivation&#34;&gt;1. Motivation&lt;/h2&gt;&#xA;&lt;p&gt;I came across this project while searching for interesting Arduino projects to dive into. As someone with a passion for retro games, I was intrigued by the idea of creating a portable Arduino game console. This project allowed me to combine my interest in retro gaming with my desire to explore hardware design and software development.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2-how-to-build-the-console&#34;&gt;2. How to Build the Console&lt;/h2&gt;&#xA;&lt;h3 id=&#34;parts-needed&#34;&gt;Parts Needed&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Arduino Leonardo&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;0.96-inch OLED Display Module&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;ALP1205 Buzzer&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Tactile Switches (for buttons)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;3-Pin Slide Switch&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;instructions&#34;&gt;Instructions&lt;/h3&gt;&#xA;&lt;h4 id=&#34;step-1-set-up-the-arduino-leonardo&#34;&gt;Step 1: Set Up the Arduino Leonardo&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Ensure the Arduino IDE is installed on your computer. You can download it from Arduino’s &lt;a href=&#34;https://www.arduino.cc/en/software&#34;&gt;official website&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;step-2-connect-the-oled-display-module&#34;&gt;Step 2: Connect the OLED Display Module&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use the I2C communication protocol to connect the OLED module:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;SDA&lt;/strong&gt; pin on the display connects to &lt;strong&gt;A4&lt;/strong&gt; (SDA pin) on the Leonardo.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;SCL&lt;/strong&gt; pin on the display connects to &lt;strong&gt;A5&lt;/strong&gt; (SCL pin) on the Leonardo.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;VCC&lt;/strong&gt; connects to &lt;strong&gt;5V&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;GND&lt;/strong&gt; connects to &lt;strong&gt;GND&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;step-3-wire-the-buttons&#34;&gt;Step 3: Wire the Buttons&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Connect tactile switches to digital pins on the Leonardo for input:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Button 1 to &lt;strong&gt;pin 2&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Button 2 to &lt;strong&gt;pin 3&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Button 3 to &lt;strong&gt;pin 4&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Button 4 to &lt;strong&gt;pin 5&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Use pull-down resistors (10kΩ) to ensure stable input readings.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;step-4-add-the-slide-switch&#34;&gt;Step 4: Add the Slide Switch&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Connect one side of the slide switch to a digital pin (e.g., &lt;strong&gt;pin 6&lt;/strong&gt;) and the other side to &lt;strong&gt;GND&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;step-5-attach-the-buzzer&#34;&gt;Step 5: Attach the Buzzer&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Connect the positive terminal of the buzzer to a PWM pin (e.g., &lt;strong&gt;pin 9&lt;/strong&gt;) and the negative terminal to &lt;strong&gt;GND&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;step-6-power-the-console&#34;&gt;Step 6: Power the Console&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Use the Arduino Leonardo’s USB connection for power and programming.&lt;/li&gt;&#xA;&lt;li&gt;Alternatively, connect a portable power supply via its power input.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;3-theoretical-background&#34;&gt;3. Theoretical Background&lt;/h2&gt;&#xA;&lt;h3 id=&#34;principle-of-the-button&#34;&gt;Principle of the Button:&lt;/h3&gt;&#xA;&lt;p&gt;Buttons in Arduino are connected to digital input pins to detect their status. When pressed, the button closes the circuit, sending a HIGH signal to the pin. Arduino reads this signal and performs corresponding tasks based on the button’s state. Buttons can be connected in various configurations, such as:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
